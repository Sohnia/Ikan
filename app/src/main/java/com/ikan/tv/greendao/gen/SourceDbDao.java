package com.ikan.tv.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ikan.tv.dao.db.SourceDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOURCE_DB".
*/
public class SourceDbDao extends AbstractDao<SourceDb, Long> {

    public static final String TABLENAME = "SOURCE_DB";

    /**
     * Properties of entity SourceDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property RequireId = new Property(2, String.class, "requireId", false, "REQUIRE_ID");
        public final static Property Version = new Property(3, int.class, "version", false, "VERSION");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Api = new Property(5, String.class, "api", false, "API");
        public final static Property Charset = new Property(6, String.class, "charset", false, "CHARSET");
        public final static Property BlockName = new Property(7, String.class, "blockName", false, "BLOCK_NAME");
        public final static Property BlockClassId = new Property(8, String.class, "blockClassId", false, "BLOCK_CLASS_ID");
        public final static Property PlayFlag = new Property(9, String.class, "playFlag", false, "PLAY_FLAG");
        public final static Property ShareFlag = new Property(10, String.class, "shareFlag", false, "SHARE_FLAG");
        public final static Property PlayHeader = new Property(11, String.class, "playHeader", false, "PLAY_HEADER");
    }


    public SourceDbDao(DaoConfig config) {
        super(config);
    }
    
    public SourceDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOURCE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"REQUIRE_ID\" TEXT," + // 2: requireId
                "\"VERSION\" INTEGER NOT NULL ," + // 3: version
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"API\" TEXT," + // 5: api
                "\"CHARSET\" TEXT," + // 6: charset
                "\"BLOCK_NAME\" TEXT," + // 7: blockName
                "\"BLOCK_CLASS_ID\" TEXT," + // 8: blockClassId
                "\"PLAY_FLAG\" TEXT," + // 9: playFlag
                "\"SHARE_FLAG\" TEXT," + // 10: shareFlag
                "\"PLAY_HEADER\" TEXT);"); // 11: playHeader
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOURCE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SourceDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String requireId = entity.getRequireId();
        if (requireId != null) {
            stmt.bindString(3, requireId);
        }
        stmt.bindLong(4, entity.getVersion());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String api = entity.getApi();
        if (api != null) {
            stmt.bindString(6, api);
        }
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(7, charset);
        }
 
        String blockName = entity.getBlockName();
        if (blockName != null) {
            stmt.bindString(8, blockName);
        }
 
        String blockClassId = entity.getBlockClassId();
        if (blockClassId != null) {
            stmt.bindString(9, blockClassId);
        }
 
        String playFlag = entity.getPlayFlag();
        if (playFlag != null) {
            stmt.bindString(10, playFlag);
        }
 
        String shareFlag = entity.getShareFlag();
        if (shareFlag != null) {
            stmt.bindString(11, shareFlag);
        }
 
        String playHeader = entity.getPlayHeader();
        if (playHeader != null) {
            stmt.bindString(12, playHeader);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SourceDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String requireId = entity.getRequireId();
        if (requireId != null) {
            stmt.bindString(3, requireId);
        }
        stmt.bindLong(4, entity.getVersion());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String api = entity.getApi();
        if (api != null) {
            stmt.bindString(6, api);
        }
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(7, charset);
        }
 
        String blockName = entity.getBlockName();
        if (blockName != null) {
            stmt.bindString(8, blockName);
        }
 
        String blockClassId = entity.getBlockClassId();
        if (blockClassId != null) {
            stmt.bindString(9, blockClassId);
        }
 
        String playFlag = entity.getPlayFlag();
        if (playFlag != null) {
            stmt.bindString(10, playFlag);
        }
 
        String shareFlag = entity.getShareFlag();
        if (shareFlag != null) {
            stmt.bindString(11, shareFlag);
        }
 
        String playHeader = entity.getPlayHeader();
        if (playHeader != null) {
            stmt.bindString(12, playHeader);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SourceDb readEntity(Cursor cursor, int offset) {
        SourceDb entity = new SourceDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // requireId
            cursor.getInt(offset + 3), // version
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // api
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // charset
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // blockName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // blockClassId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // playFlag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // shareFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // playHeader
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SourceDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRequireId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.getInt(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApi(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCharset(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBlockName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBlockClassId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlayFlag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShareFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlayHeader(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SourceDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SourceDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SourceDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
