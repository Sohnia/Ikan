package com.ikan.tv.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ikan.tv.dao.convert.SourceDbConvert;
import com.ikan.tv.dao.convert.StringConvert;
import com.ikan.tv.dao.db.SourceDb;
import java.util.List;

import com.ikan.tv.dao.db.StoreDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_DB".
*/
public class StoreDbDao extends AbstractDao<StoreDb, Long> {

    public static final String TABLENAME = "STORE_DB";

    /**
     * Properties of entity StoreDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UpdateTime = new Property(1, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Note = new Property(2, String.class, "note", false, "NOTE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SoureceName = new Property(4, String.class, "soureceName", false, "SOURECE_NAME");
        public final static Property RequireId = new Property(5, String.class, "requireId", false, "REQUIRE_ID");
        public final static Property TvType = new Property(6, String.class, "tvType", false, "TV_TYPE");
        public final static Property Lang = new Property(7, String.class, "lang", false, "LANG");
        public final static Property Pic = new Property(8, String.class, "pic", false, "PIC");
        public final static Property Area = new Property(9, String.class, "area", false, "AREA");
        public final static Property Year = new Property(10, String.class, "year", false, "YEAR");
        public final static Property State = new Property(11, int.class, "state", false, "STATE");
        public final static Property Actor = new Property(12, String.class, "actor", false, "ACTOR");
        public final static Property Director = new Property(13, String.class, "director", false, "DIRECTOR");
        public final static Property Description = new Property(14, String.class, "description", false, "DESCRIPTION");
        public final static Property LastWatch = new Property(15, int.class, "lastWatch", false, "LAST_WATCH");
        public final static Property VideoProgress = new Property(16, int.class, "videoProgress", false, "VIDEO_PROGRESS");
        public final static Property LastTimeToDb = new Property(17, long.class, "lastTimeToDb", false, "LAST_TIME_TO_DB");
        public final static Property PlayM3u8List = new Property(18, String.class, "playM3u8List", false, "PLAY_M3U8_LIST");
        public final static Property ShareList = new Property(19, String.class, "shareList", false, "SHARE_LIST");
        public final static Property SourceDb = new Property(20, String.class, "sourceDb", false, "SOURCE_DB");
    }

    private final StringConvert playM3u8ListConverter = new StringConvert();
    private final StringConvert shareListConverter = new StringConvert();
    private final SourceDbConvert sourceDbConverter = new SourceDbConvert();

    public StoreDbDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UPDATE_TIME\" TEXT," + // 1: updateTime
                "\"NOTE\" TEXT," + // 2: note
                "\"NAME\" TEXT," + // 3: name
                "\"SOURECE_NAME\" TEXT," + // 4: soureceName
                "\"REQUIRE_ID\" TEXT," + // 5: requireId
                "\"TV_TYPE\" TEXT," + // 6: tvType
                "\"LANG\" TEXT," + // 7: lang
                "\"PIC\" TEXT," + // 8: pic
                "\"AREA\" TEXT," + // 9: area
                "\"YEAR\" TEXT," + // 10: year
                "\"STATE\" INTEGER NOT NULL ," + // 11: state
                "\"ACTOR\" TEXT," + // 12: actor
                "\"DIRECTOR\" TEXT," + // 13: director
                "\"DESCRIPTION\" TEXT," + // 14: description
                "\"LAST_WATCH\" INTEGER NOT NULL ," + // 15: lastWatch
                "\"VIDEO_PROGRESS\" INTEGER NOT NULL ," + // 16: videoProgress
                "\"LAST_TIME_TO_DB\" INTEGER NOT NULL ," + // 17: lastTimeToDb
                "\"PLAY_M3U8_LIST\" TEXT," + // 18: playM3u8List
                "\"SHARE_LIST\" TEXT," + // 19: shareList
                "\"SOURCE_DB\" TEXT);"); // 20: sourceDb
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_STORE_DB_NAME_SOURECE_NAME ON \"STORE_DB\"" +
                " (\"NAME\" ASC,\"SOURECE_NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoreDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(3, note);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String soureceName = entity.getSoureceName();
        if (soureceName != null) {
            stmt.bindString(5, soureceName);
        }
 
        String requireId = entity.getRequireId();
        if (requireId != null) {
            stmt.bindString(6, requireId);
        }
 
        String tvType = entity.getTvType();
        if (tvType != null) {
            stmt.bindString(7, tvType);
        }
 
        String lang = entity.getLang();
        if (lang != null) {
            stmt.bindString(8, lang);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(9, pic);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(11, year);
        }
        stmt.bindLong(12, entity.getState());
 
        String actor = entity.getActor();
        if (actor != null) {
            stmt.bindString(13, actor);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(14, director);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
        stmt.bindLong(16, entity.getLastWatch());
        stmt.bindLong(17, entity.getVideoProgress());
        stmt.bindLong(18, entity.getLastTimeToDb());
 
        List playM3u8List = entity.getPlayM3u8List();
        if (playM3u8List != null) {
            stmt.bindString(19, playM3u8ListConverter.convertToDatabaseValue(playM3u8List));
        }
 
        List shareList = entity.getShareList();
        if (shareList != null) {
            stmt.bindString(20, shareListConverter.convertToDatabaseValue(shareList));
        }
 
        SourceDb sourceDb = entity.getSourceDb();
        if (sourceDb != null) {
            stmt.bindString(21, sourceDbConverter.convertToDatabaseValue(sourceDb));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoreDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(3, note);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String soureceName = entity.getSoureceName();
        if (soureceName != null) {
            stmt.bindString(5, soureceName);
        }
 
        String requireId = entity.getRequireId();
        if (requireId != null) {
            stmt.bindString(6, requireId);
        }
 
        String tvType = entity.getTvType();
        if (tvType != null) {
            stmt.bindString(7, tvType);
        }
 
        String lang = entity.getLang();
        if (lang != null) {
            stmt.bindString(8, lang);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(9, pic);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(10, area);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(11, year);
        }
        stmt.bindLong(12, entity.getState());
 
        String actor = entity.getActor();
        if (actor != null) {
            stmt.bindString(13, actor);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(14, director);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
        stmt.bindLong(16, entity.getLastWatch());
        stmt.bindLong(17, entity.getVideoProgress());
        stmt.bindLong(18, entity.getLastTimeToDb());
 
        List playM3u8List = entity.getPlayM3u8List();
        if (playM3u8List != null) {
            stmt.bindString(19, playM3u8ListConverter.convertToDatabaseValue(playM3u8List));
        }
 
        List shareList = entity.getShareList();
        if (shareList != null) {
            stmt.bindString(20, shareListConverter.convertToDatabaseValue(shareList));
        }
 
        SourceDb sourceDb = entity.getSourceDb();
        if (sourceDb != null) {
            stmt.bindString(21, sourceDbConverter.convertToDatabaseValue(sourceDb));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StoreDb readEntity(Cursor cursor, int offset) {
        StoreDb entity = new StoreDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // note
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // soureceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // requireId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tvType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lang
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // area
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // year
            cursor.getInt(offset + 11), // state
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // actor
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // director
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // description
            cursor.getInt(offset + 15), // lastWatch
            cursor.getInt(offset + 16), // videoProgress
            cursor.getLong(offset + 17), // lastTimeToDb
            cursor.isNull(offset + 18) ? null : playM3u8ListConverter.convertToEntityProperty(cursor.getString(offset + 18)), // playM3u8List
            cursor.isNull(offset + 19) ? null : shareListConverter.convertToEntityProperty(cursor.getString(offset + 19)), // shareList
            cursor.isNull(offset + 20) ? null : sourceDbConverter.convertToEntityProperty(cursor.getString(offset + 20)) // sourceDb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoreDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSoureceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRequireId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTvType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLang(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setArea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYear(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setState(cursor.getInt(offset + 11));
        entity.setActor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDirector(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDescription(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLastWatch(cursor.getInt(offset + 15));
        entity.setVideoProgress(cursor.getInt(offset + 16));
        entity.setLastTimeToDb(cursor.getLong(offset + 17));
        entity.setPlayM3u8List(cursor.isNull(offset + 18) ? null : playM3u8ListConverter.convertToEntityProperty(cursor.getString(offset + 18)));
        entity.setShareList(cursor.isNull(offset + 19) ? null : shareListConverter.convertToEntityProperty(cursor.getString(offset + 19)));
        entity.setSourceDb(cursor.isNull(offset + 20) ? null : sourceDbConverter.convertToEntityProperty(cursor.getString(offset + 20)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoreDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoreDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoreDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
